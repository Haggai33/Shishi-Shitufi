{
  "rules": {
    "events": {
      ".read": "auth != null",
      ".write": "root.child('admins').child(auth.uid).exists()"
    },
    "menuItems": {
      ".read": "auth != null",
      "$itemId": {
        ".write": 
          // 1. מנהל יכול לעשות הכל
          "root.child('admins').child(auth.uid).exists() || " +
          
          // 2. משתמש יכול ליצור פריט חדש אם הוא מוגדר כיוצר
          "(newData.exists() && !data.exists() && newData.child('creatorId').val() === auth.uid) || " +
          
          // 3. היוצר יכול למחוק את הפריט שיצר (אם הוא לא משובץ, או משובץ לעצמו)
          "(data.exists() && !newData.exists() && data.child('creatorId').val() === auth.uid && (!data.child('assignedTo').exists() || data.child('assignedTo').val() === auth.uid)) || " +
          
          // 4. כל משתמש מחובר יכול לשבץ את עצמו לפריט פנוי
          "(data.exists() && newData.exists() && !data.child('assignedTo').exists() && newData.child('assignedTo').val() === auth.uid) || " +

          // 5. משתמש ששובץ יכול לבטל את השיבוץ של עצמו
          "(data.exists() && newData.exists() && data.child('assignedTo').val() === auth.uid && !newData.child('assignedTo').exists()) || " +
          
          // 6. היוצר יכול לערוך את הפריט (אם הוא לא משובץ, או משובץ לעצמו)
          "(data.exists() && newData.exists() && data.child('creatorId').val() === auth.uid && (!data.child('assignedTo').exists() || data.child('assignedTo').val() === auth.uid))"
      }
    },
    "assignments": {
      ".read": "auth != null",
      "$assignmentId": {
        ".write": "auth != null && (root.child('admins').child(auth.uid).exists() || !data.exists() || data.child('userId').val() === auth.uid)",
        ".validate": "newData.hasChildren(['eventId', 'menuItemId', 'userId', 'userName', 'quantity', 'status', 'assignedAt'])"
      }
    },
    "admins": {
      ".read": "auth != null",
      ".write": "root.child('admins').child(auth.uid).exists()",
      "$uid": {
        ".write": "auth != null && (root.child('admins').child(auth.uid).exists() || auth.uid == $uid)",
        ".validate": "newData.exists() || data.child('email').val() !== 'chagai33@gmail.com'"
      }
    },
    "presetLists": {
      ".read": "auth != null",
      ".write": "root.child('admins').child(auth.uid).exists()"
    }
  }
}
